<?xml version="1.0" encoding="UTF-8"?>
<!--
$Id$
vim:spell:sts=2:sw=2:
 -->

<!-- =========================================================================
Advanced Usage
-->

<chapter id="advanced_usage">
  <title>Advanced Usage</title>

  <para>This chapter covers several advanced usage topics.</para>

  <!-- Test skipping -->
  <section id="test_skipping">
    <title>Test Skipping</title>

    <para>There are times where the test code you have written is just not applicable to the system you are running on. This section describes how to skip these tests but maintain the total test count.</para>

    <para>Probably the easiest example would be shell code that is meant to run under the <command>bash</command> shell, but the unit test is running under the Bourne shell. There are things that just won't work. The following test code demonstrates two sample functions, one that will be run under any shell, and the another that will run only under the <command>bash</command> shell.</para>

    <example id="ex:math_include">
      <title><filename>math.inc</filename> -- math include</title>
      <programlisting>
<![CDATA[add_generic()
{
  num_a=$1
  num_b=$2

  expr $1 + $2
}

add_bash()
{
  num_a=$1
  num_b=$2

  echo $(($1 + $2))
}]]>
      </programlisting>
    </example>

    <para>And here is a corresponding unit test that correctly skips the <function>add_bash()</function> function when the unit test is not running under the <command>bash</command> shell.</para>

    <example id="ex:math_test">
      <title><filename>math_test</filename> -- math unit test</title>
      <programlisting>
<![CDATA[#! /bin/sh

testAdding()
{
  result=`add_generic 1 2`
  assertEquals \
      "the result of '${result}' was wrong" \
      "${result}" 3

  # disable non-generic tests
  [ -z "${BASH_VERSION:-}" ] && startSkipping

  result=`add_bash 1 2`
  assertEquals \
      "the result of '${result}' was wrong" \
      "${result}" 3
}

oneTimeSetUp()
{
  # load include
  . ./math.inc
}

# load and run shUnit2
. ./shunit2]]>
      </programlisting>
    </example>

    <para>Running the above test under the <command>bash</command> shell will result in the following output.</para>

    <screen>
<![CDATA[#
# Performing tests
#
testAdding

#
# Test report
#
tests passed:     2 100%
tests failed:     0   0%
tests skipped:    0   0%
tests total:      2 100%]]>
    </screen>

    <para>But, running the test under any other shell will result in the following output.</para>

    <screen>
<![CDATA[#
# Performing tests
#
testAdding

#
# Test report
#
tests passed:     1  50%
tests failed:     0   0%
tests skipped:    1  50%
tests total:      2 100%]]>
    </screen>

    <para>As you can see, the total number of tests has not changed, but the report indicates that some tests were skipped.</para>

    <para>Skipping can be controlled with the following functions: <function>startSkipping()</function>, <function>stopSkipping()</function>, and <function>isSkipping</function>. Once skipping is enabled, it will remain enabled until the end of the current test function call, after which skipping is disabled.</para>
  </section>

  <section id="line_numbers">
    <title>Including Line Numbers in Asserts</title>

    <para>If you include lots of assert statements in an individual test function, it can become difficult to determine exactly which assert was thrown unless your messages are unique. To help somewhat, line numbers can be included in the assert messages. To enable this, a special shell "macro" must be used rather than the standard assert calls.</para>

    <para>For example, to include line numbers for a <function>assertEquals()</function> function call, replace the '<function>assertEquals()</function>' with '<function>${_ASSERT_EQUALS_}</function>'.</para>

    <example id="ex:line_numbers">
      <title>Asserts without and with line numbers</title>
      <programlisting>
<![CDATA[testEquals()
{
  # this assert will not have line numbers included (e.g. "ASSERT: ...")
  assertEquals 'not equal' 1 2

  # this assert will have line numbers included (e.g. "ASSERT:[123] ...")
  ${_ASSERT_EQUALS_} 'not equal' 1 2
}]]>
      </programlisting>
    </example>

    <para>Note: line numbers are not supported in all shells. If a shell does not support them, no errors will be thrown. Supported shells include: <command>bash</command> (>=3.0), <command>ksh</command>, <command>pdksh</command>, and <command>zsh</command>.</para>
  </section>
</chapter>
